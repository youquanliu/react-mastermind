{"version":3,"sources":["components/GuessRow/GuessRow.module.css","components/ColorPicker/ColorPicker.module.css","components/GuessPeg/GuessPeg.module.css","components/ScoreButton/ScoreButton.module.css","components/GameBoard/GameBoard.module.css","components/GameTimer/GameTimer.module.css","components/GuessPeg/GuessPeg.jsx","components/GuessPegs/GuessPegs.jsx","components/GuessScore/GuessScore.jsx","components/ScoreButton/ScoreButton.jsx","components/GuessRow/GuessRow.jsx","components/GameBoard/GameBoard.jsx","components/ColorPicker/ColorPicker.jsx","components/GameTimer/GameTimer.jsx","components/NewGameButton/NewGameButton.jsx","pages/GamePage/GamePage.jsx","pages/SettingsPage/SettingsPage.jsx","pages/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","GuessPeg","props","className","styles","peg","style","backgroundColor","color","border","cursor","currentGuess","onClick","handlePegClick","GuessPegs","colors","code","GuessScore","score","scores","repeat","perfect","almost","split","baseStyle","width","height","margin","borderRadius","pegStyles","borderColor","map","idx","key","ScoreButton","button","disabled","handleScoreClick","GuessRow","rowNum","rowIdx","guess","includes","GameBoard","guesses","length","ColorPicker","selColorIdx","handleColorSelection","GameTimer","handleTick","isTiming","handleTimerUpdate","this","timerId","setInterval","clearInterval","seconds","mins","Math","floor","toString","padStart","secs","formatTime","elapsedTime","Component","NewGameButton","handleNewGameClick","GamePage","to","winTries","SettingsPage","selectedLevelStyle","levels","Object","keys","colorsLookup","level","difficulty","handleDifficultyChange","history","push","Easy","Moderate","Difficult","App","setState","curState","colorIdx","getInitialState","pegIdx","currentGuessIdx","state","guessesCopy","guessCopy","codeCopy","guessCodeCopy","secretCodeCopy","forEach","foundIdx","indexOf","scoreCopy","getNewGuess","genCode","numColors","Array","fill","dummy","random","lastGuess","getWinTries","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25e4aabb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"GuessRow\":\"GuessRow_GuessRow__caHtV\",\"rowNum\":\"GuessRow_rowNum__2k3QY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColorPicker\":\"ColorPicker_ColorPicker__2jNsY\",\"button\":\"ColorPicker_button__38u9e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"peg\":\"GuessPeg_peg__3brT0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ScoreButton_button__2dee5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameBoard\":\"GameBoard_GameBoard__dmTB-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameTimer\":\"GameTimer_GameTimer__m2Stb\"};","import React from 'react';\r\nimport styles from './GuessPeg.module.css';\r\n\r\nconst GuessPeg = (props) => (\r\n  <div\r\n    className={styles.peg}\r\n    style={{\r\n      backgroundColor: props.color,\r\n      border: props.color ? `1px solid ${props.color}`: '1px dashed grey',\r\n      cursor: props.currentGuess && 'pointer'\r\n    }}\r\n    onClick={props.currentGuess ? props.handlePegClick : null}\r\n  />\r\n);\r\n\r\nexport default GuessPeg;\r\n","import React from 'react';\r\nimport GuessPeg from '../GuessPeg/GuessPeg';\r\nimport './GuessPegs.css';\r\n\r\nconst GuessPegs = (props) => (\r\n  <div className='GuessPegs'>\r\n    <GuessPeg\r\n      color={props.colors[props.code[0]]}\r\n      currentGuess={props.currentGuess}\r\n      handlePegClick={() => props.handlePegClick(0)}\r\n    />\r\n    <GuessPeg\r\n      color={props.colors[props.code[1]]}\r\n      currentGuess={props.currentGuess}\r\n      handlePegClick={() => props.handlePegClick(1)}\r\n    />\r\n    <GuessPeg\r\n      color={props.colors[props.code[2]]}\r\n      currentGuess={props.currentGuess}\r\n      handlePegClick={() => props.handlePegClick(2)}\r\n    />\r\n    <GuessPeg\r\n      color={props.colors[props.code[3]]}\r\n      currentGuess={props.currentGuess}\r\n      handlePegClick={() => props.handlePegClick(3)}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default GuessPegs;\r\n","import React from 'react';\r\nimport './GuessScore.css';\r\n\r\nconst GuessScore = ({ score }) => {\r\n  let scores = ('P'.repeat(score.perfect) + 'A'.repeat(score.almost) +\r\n    'I'.repeat(4 - score.perfect - score.almost)).split('');\r\n  \r\n  let baseStyle = {\r\n    width: 10,\r\n    height: 10,\r\n    margin: 1,\r\n    border: '2px solid',\r\n    borderRadius: '50%'\r\n  };\r\n\r\n  let pegStyles = {\r\n    'P': {\r\n      borderColor: 'black',\r\n      backgroundColor: 'black'\r\n    },\r\n    'A': {\r\n      borderColor: 'black',\r\n      backgroundColor: 'white'\r\n    },\r\n    'I': {\r\n      borderColor: 'white',\r\n      backgroundColor: 'lightgrey'\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className='GuessScore'>\r\n      {scores.map((score, idx) =>\r\n        <div\r\n          key={idx}\r\n          style={{...baseStyle, ...pegStyles[score]}} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GuessScore;\r\n","import React from 'react';\r\nimport styles from './ScoreButton.module.css';\r\n\r\nconst ScoreButton = (props) => (\r\n  <button\r\n    className={`${styles.button} btn btn-default`}\r\n    disabled={props.disabled}\r\n    onClick={props.handleScoreClick}\r\n  >\r\n    ✔\r\n  </button>\r\n);\r\n\r\nexport default ScoreButton;\r\n","import React from 'react';\r\nimport GuessPegs from '../GuessPegs/GuessPegs';\r\nimport GuessScore from '../GuessScore/GuessScore';\r\nimport ScoreButton from '../ScoreButton/ScoreButton';\r\nimport styles from './GuessRow.module.css';\r\n\r\nconst GuessRow = (props) => (\r\n  <div className={styles.GuessRow}>\r\n    <div\r\n      className={styles.rowNum}\r\n      style={{color: props.currentGuess ? 'black' : 'lightgrey'}}\r\n    >\r\n      {props.rowIdx + 1}\r\n    </div>\r\n    <GuessPegs\r\n      colors={props.colors}\r\n      code={props.guess.code}\r\n      currentGuess={props.currentGuess}\r\n      handlePegClick={props.handlePegClick}\r\n    />\r\n    {\r\n      props.currentGuess && props.guess.score.perfect !== 4 ?\r\n        <ScoreButton\r\n          disabled={props.guess.code.includes(null)}\r\n          handleScoreClick={props.handleScoreClick}\r\n        /> :\r\n        <GuessScore score={props.guess.score} />\r\n    }\r\n  </div>\r\n);\r\n\r\nexport default GuessRow;\r\n","import React from 'react';\r\nimport GuessRow from '../GuessRow/GuessRow';\r\nimport styles from './GameBoard.module.css';\r\n\r\nconst GameBoard = (props) => (\r\n  <div className={styles.GameBoard}>\r\n    {props.guesses.map((guess, idx) =>\r\n      <GuessRow\r\n        guess={guess}\r\n        colors={props.colors}\r\n        rowIdx={idx}\r\n        currentGuess={idx === (props.guesses.length - 1)}\r\n        handlePegClick={props.handlePegClick}\r\n        handleScoreClick={props.handleScoreClick}\r\n        key={idx}\r\n      />\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default GameBoard;\r\n","import React from 'react';\r\nimport styles from './ColorPicker.module.css';\r\n\r\nconst ColorPicker = (props) => (\r\n  <div className={styles.ColorPicker}>\r\n    {props.colors.map((color, idx) =>\r\n      <button\r\n        key={color}\r\n        className={styles.button}\r\n        style={{\r\n          backgroundColor: props.selColorIdx === idx ? 'white' : color,\r\n          borderColor: color\r\n        }}\r\n        onClick={() => props.handleColorSelection(idx)}\r\n      />\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default ColorPicker;\r\n","import React, { Component } from 'react';\r\nimport styles from './GameTimer.module.css';\r\n\r\nfunction formatTime(seconds) {\r\n  let mins = Math.floor(seconds / 60).toString().padStart(2, '0');\r\n  let secs = (seconds % 60).toString().padStart(2, '0');\r\n  return `${mins}:${secs}`;\r\n}\r\n\r\nclass GameTimer extends Component {\r\n\r\n  handleTick = () => {\r\n    // Ignore ticks?\r\n    if (!this.props.isTiming) return;\r\n    this.props.handleTimerUpdate();\r\n  };\r\n\r\n  /*--- Lifecycle Methods ---*/\r\n\r\n  componentDidMount() {\r\n    this.timerId = setInterval(this.handleTick, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`${styles.GameTimer} flex-h`}>\r\n        {formatTime(this.props.elapsedTime)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameTimer;\r\n","import React from 'react';\r\n\r\nconst NewGameButton = (props) => (\r\n  <button\r\n    className='btn btn-default'\r\n    onClick={props.handleNewGameClick}\r\n  >\r\n    New Game\r\n  </button>\r\n);\r\n\r\nexport default NewGameButton;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GameBoard from '../../components/GameBoard/GameBoard';\r\nimport ColorPicker from '../../components/ColorPicker/ColorPicker';\r\nimport GameTimer from '../../components/GameTimer/GameTimer';\r\nimport NewGameButton from '../../components/NewGameButton/NewGameButton';\r\nimport './GamePage.css';\r\n\r\nconst GamePage = (props) => {\r\n  return (\r\n    <div className=\"GamePage\">\r\n      <div className=\"flex-h align-flex-end\">\r\n        <GameBoard\r\n          colors={props.colors}\r\n          guesses={props.guesses}\r\n          handlePegClick={props.handlePegClick}\r\n          handleScoreClick={props.handleScoreClick}\r\n        />\r\n        <div className='GamePage-controls'>\r\n          <ColorPicker\r\n            colors={props.colors}\r\n            selColorIdx={props.selColorIdx}\r\n            handleColorSelection={props.handleColorSelection}\r\n          />\r\n          <GameTimer\r\n            elapsedTime={props.elapsedTime}\r\n            handleTimerUpdate={props.handleTimerUpdate}\r\n            isTiming={props.isTiming}\r\n          />\r\n          <Link className='btn btn-default GamePage-link-margin' to='/settings'>Difficulty</Link>\r\n          <NewGameButton handleNewGameClick={props.handleNewGameClick}/>\r\n        </div>\r\n      </div>\r\n      <footer className='header-footer'>\r\n        {(props.winTries ? `You Won in ${props.winTries} Guesses!` : 'Good Luck!')}\r\n      </footer>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default GamePage;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './SettingsPage.css';\r\n\r\nconst SettingsPage = (props) => {\r\n\r\n  const selectedLevelStyle = {\r\n    border: '2px solid #333'\r\n  };\r\n\r\n  function handleDifficultyChange(level) {\r\n    props.handleDifficultyChange(level);\r\n    props.history.push('/');\r\n  }\r\n\r\n  const colorKeys = Object.keys(props.colorsLookup);\r\n\r\n  const levels = colorKeys.map(level => (\r\n    <div className='Settings-level-row' key={level}>\r\n      <button className=\"Settings-level-btn btn btn-default\"\r\n        style={level === props.difficulty ? selectedLevelStyle : null}\r\n        disabled={level === props.difficulty}\r\n        onClick={() => handleDifficultyChange(level)}\r\n      >\r\n        {level}\r\n      </button>\r\n      <div className='Settings-level-colors'>\r\n        {props.colorsLookup[level].map(color => \r\n          <div\r\n            className='Settings-color'\r\n            style={{backgroundColor: color}}\r\n            key={color}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div className='Settings'>\r\n      <header className='header-footer'>Set Difficulty Level</header>\r\n      <div>\r\n        {levels}\r\n      </div>\r\n      <div>\r\n        <Link className='Settings-cancel btn btn-default btn-sm' to='/'>Cancel</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default SettingsPage;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport GamePage from '../../pages/GamePage/GamePage';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport SettingsPage from '../SettingsPage/SettingsPage';\r\n\r\nconst colors = {\r\n  Easy: ['#7CCCE5', '#FDE47F', '#E04644', '#B576AD'],\r\n  Moderate: ['#7CCCE5', '#FDE47F', '#E04644', '#B576AD', '#B7D968'],\r\n  Difficult: ['#7CCCE5', '#FDE47F', '#E04644', '#B576AD', '#B7D968', '#555E7B']\r\n};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {...this.getInitialState(), difficulty: 'Easy'};\r\n  }\r\n\r\n  getInitialState() {\r\n    return {\r\n      selColorIdx: 0,\r\n      guesses: [this.getNewGuess()],\r\n      code: this.genCode(),\r\n      // new state coming in!\r\n      elapsedTime: 0,\r\n      isTiming: true\r\n    };\r\n  }\r\n\r\n  getNewGuess() {\r\n    return {\r\n      code: [null, null, null, null],\r\n      score: {\r\n        perfect: 0,\r\n        almost: 0\r\n      }\r\n    };\r\n  }\r\n\r\n  genCode() {\r\n    let numColors = this.state && colors[this.state.difficulty].length;\r\n    numColors = numColors || 4;\r\n    return new Array(4).fill().map(dummy => Math.floor(Math.random() * numColors));\r\n  }\r\n\r\n  getWinTries() {\r\n    // if winner, return num guesses, otherwise 0 (no winner)\r\n    let lastGuess = this.state.guesses.length - 1;\r\n    return this.state.guesses[lastGuess].score.perfect === 4 ? lastGuess + 1 : 0;\r\n  }\r\n\r\n  handleTimerUpdate = () => {\r\n    this.setState((curState) => ({elapsedTime: ++curState.elapsedTime}));\r\n  }\r\n\r\n  handleDifficultyChange = (level) => {\r\n    // Use callback to ensure level is updated BEFORE calling handleNewGameClick\r\n    this.setState({difficulty: level}, () => this.handleNewGameClick());\r\n  }\r\n  \r\n  handleColorSelection = (colorIdx) => {\r\n    this.setState({selColorIdx: colorIdx});\r\n  }\r\n\r\n  handleNewGameClick = () => {\r\n    this.setState(this.getInitialState());\r\n  }\r\n\r\n  handlePegClick = (pegIdx) => {\r\n    // Get index of last guess object\r\n    let currentGuessIdx = this.state.guesses.length - 1;\r\n\r\n    // Always replace objects/arrays with NEW ones\r\n    let guessesCopy = [...this.state.guesses];\r\n    let guessCopy = {...guessesCopy[currentGuessIdx]};\r\n    let codeCopy = [...guessCopy.code];\r\n\r\n    // Update the NEW code array with the currently selected color\r\n    codeCopy[pegIdx] = this.state.selColorIdx;\r\n\r\n    // Update the NEW guess object\r\n    guessCopy.code = codeCopy;\r\n\r\n    // Update the NEW guesses array\r\n    guessesCopy[currentGuessIdx] = guessCopy;\r\n\r\n    // Update state with the NEW guesses array\r\n    this.setState({\r\n        guesses: guessesCopy\r\n    });\r\n  }\r\n\r\n  handleScoreClick = () => {\r\n    // Need the index of the current guess object (last object in guesses array)\r\n    let currentGuessIdx = this.state.guesses.length - 1;\r\n\r\n    // Create \"working\" copies of the \"guessed\" code and the secret\r\n    // code so that we can modify them as we compute the number of\r\n    // perfect and almost without messing up the actual ones in state\r\n    let guessCodeCopy = [...this.state.guesses[currentGuessIdx].code];\r\n    let secretCodeCopy = [...this.state.code];\r\n\r\n    let perfect = 0, almost = 0;\r\n\r\n    // First pass computes number of \"perfect\"\r\n    guessCodeCopy.forEach((code, idx) => {\r\n      if (secretCodeCopy[idx] === code) {\r\n        perfect++;\r\n        // Ensure same choice is not matched again\r\n        // by updating both elements in the \"working\"\r\n        // arrays to null\r\n        guessCodeCopy[idx] = secretCodeCopy[idx] = null;\r\n      }\r\n    });\r\n\r\n    // Second pass computes number of \"almost\"\r\n    guessCodeCopy.forEach((code, idx) => {\r\n      if (code === null) return;\r\n      let foundIdx = secretCodeCopy.indexOf(code);\r\n      if (foundIdx > -1) {\r\n        almost++;\r\n        // Again, ensure same choice is not matched again\r\n        secretCodeCopy[foundIdx] = null;\r\n      }\r\n    });\r\n\r\n    // State must only be updated with NEW objects/arrays\r\n        // Always replace objects/arrays with NEW ones\r\n    let guessesCopy = [...this.state.guesses];\r\n    let guessCopy = {...guessesCopy[currentGuessIdx]};\r\n    let scoreCopy = {...guessCopy.score};\r\n\r\n    scoreCopy.perfect = perfect;\r\n    scoreCopy.almost = almost;\r\n    guessCopy.score = scoreCopy;\r\n    guessesCopy[currentGuessIdx] = guessCopy;\r\n\r\n    if (perfect !== 4) guessesCopy.push(this.getNewGuess());\r\n\r\n    this.setState({\r\n      guesses: guessesCopy,\r\n      // This is a great way to update isTiming\r\n      isTiming: perfect !== 4\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let winTries = this.getWinTries();\r\n    return (\r\n      <div>\r\n        <header className='header-footer'>R E A C T &nbsp;&nbsp;&nbsp;  M A S T E R M I N D</header>\r\n        <Switch>\r\n          <Route exact path='/' render={() =>\r\n            <GamePage\r\n              winTries={winTries}\r\n              colors={colors[this.state.difficulty]}\r\n              selColorIdx={this.state.selColorIdx}\r\n              guesses={this.state.guesses}\r\n              elapsedTime={this.state.elapsedTime}\r\n              isTiming={this.state.isTiming}\r\n              handleColorSelection={this.handleColorSelection}\r\n              handleNewGameClick={this.handleNewGameClick}\r\n              handlePegClick={this.handlePegClick}\r\n              handleScoreClick={this.handleScoreClick}\r\n              handleTimerUpdate={this.handleTimerUpdate}\r\n            />\r\n          } />\r\n          <Route exact path='/settings' render={props => \r\n            <SettingsPage\r\n              {...props} \r\n              colorsLookup={colors}\r\n              difficulty={this.state.difficulty}\r\n              handleDifficultyChange={this.handleDifficultyChange}\r\n            />\r\n          } />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './pages/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router><App /></Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}